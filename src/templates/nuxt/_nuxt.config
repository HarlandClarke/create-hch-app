<% if (framework === 'vuetify') { %>
const VuetifyLoaderPlugin = require('vuetify-loader/lib/plugin')
<% } %>
module.exports = {
  /*nano 
  ** Headers of the page
  */
  head: {
    title: '<%= appName %>',
    meta: [
      {charset: 'utf-8'},
      {name: 'viewport', content: 'width=device-width, initial-scale=1'},
      {hid: 'description', name: 'description', content: '<%= description %>'}
    ],
    link: [
      {rel: 'icon', type: 'image/x-icon', href: '/favicon.ico'},
      {rel: 'stylesheet', href: 'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons'}
    ]
  },
  plugins: [<% if (framework === 'vuetify' ) { %>
    '@/plugins/vuetify'
  <% } %>],
  css: [<% if (framework === 'vuetify') { %>
    '~/assets/style/app.styl'
  <% } %>],
  /*
  ** Customize the progress bar color
  */
  loading: {color: '#3B8070'},
  /*
   ** Routing
  */
  /*
  ** Build configuration
  */
  build: {
    babel: {
      presets: [<% if (lang === 'js') { %>
        '@nuxtjs/babel-preset-app'<% } else if (lang === 'es2015') { %>
        '@babel/preset-es2015'<% } else if (lang === 'es2016') { %>
        '@babel/preset-es2016'<% } else if (lang === 'es2017') { %>
        '@babel/preset-es2017'<% } %>
        ]
    },
    <% if (framework === 'vuetify') { %>
    transpile: ['vuetify/lib'],
    plugins: [new VuetifyLoaderPlugin()],
    loaders: {
      stylus: {
        import: ['~assets/style/variables.styl']
      }
    },
    <% } %>
    /*
    ** Run ESLint on save
    */
    extend(config, ctx) {
      <% if (eslint) { %>
      if (ctx.isDev && ctx.isClient) {
        config.module.rules.push({
          enforce: 'pre',
          test: /\.(js|vue)$/,
          loader: 'eslint-loader',
          exclude: /(node_modules)/
        })
      }
      <% } %>
    }
  },
  // mode: 'spa',
  /*
  ** Modules
  */
  modules: [<% if (http === 'axios') { %>
    '@nuxtjs/axios',<% } %><% if (framework === 'vuetify') { %>
    'bootstrap-vue/nuxt',
    <% } %>
    // ['@nuxtjs/component-cache', { maxAge: 1000 * 60 * 60 }],
    // '@nuxtjs/pwa',
    // '@nuxtjs/apollo',
    ['nuxt-i18n', {
      locales: [
        {
          code: 'en-us',
          iso: 'en-US',
          name: 'English (American)',
          file: 'en-US.js'
        }
      ],
      lazy: true,
      defaultLocale: 'en-us',
      loadLanguagesAsync: true,
      langDir: 'locales/'
    }]
  ]<% if (http === 'axios') { %>,
  /*
  ** Axios module configuration
  */
  axios: {
  }<% } %>
  /*
  ** Apollo settings
  */
  /*
  This is an example configuration with Apollo, which is only of interest if you're using GraphQL.
  apollo: {
    // tokenName: 'yourApolloTokenName', // optional, default: apollo-token
    includeNodeModules: false, // optional, default: false (this includes graphql-tag for node_modules folder)
    // authenticationType: 'Basic', // optional, default: 'Bearer'
    networkInterfaces: {
      default: '~/apollo/network-interfaces/default.js'
    },
    // required

    clientConfigs: {
      default: {
        // required
        httpEndpoint: 'http://localhost:8000/graphql/',
        // You can use `wss` for secure connection (recommended in production)
        // Use `null` to disable subscriptions
        // wsEndpoint: 'http://localhost:8000/graphql/', // optional
        // LocalStorage token
        //tokenName: 'apollo-token', // optional
        // Enable Automatic Query persisting with Apollo Engine
        persisting: false, // Optional
        // Use websockets for everything (no HTTP)
        // You need to pass a `wsEndpoint` for this to work
        websocketsOnly: false // Optional
      },
      test: {
        httpEndpoint: 'http://localhost:5000',
        // wsEndpoint: 'http://localhost:5000',
        tokenName: 'apollo-token'
      }
    }
  }
  */
}
